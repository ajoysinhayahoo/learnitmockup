<!DOCTYPE html>
<html lang="en">

<head>
    <title>WebRTC Audio Recording using MediaStreamRecorder</title>

    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">

    <script type="text/javascript" src="assets/learniteasy/vendor/msr/MediaStreamRecorder.js"></script>
    <script type="text/javascript" src="assets/learniteasy/vendor/msr/adapter-latest.js"></script>

    <link rel="stylesheet" href="assets/learniteasy/vendor/msr/style.css">

    <style>
        input {
            border: 1px solid rgb(46, 189, 235);
            border-radius: 3px;
            font-size: 1em;
            outline: none;
            padding: .2em .4em;
            width: 60px;
            text-align: center;
        }
        select {
            vertical-align: middle;
            line-height: 1;
            padding: 2px 5px;
            height: auto;
            font-size: inherit;
            margin: 0;
        }
    </style>
</head>

<body>
<article>
    <header style="text-align: center;">


    </header>


    <section class="experiment" style="padding: 5px;">
        <label for="time-interval">Time Interval (milliseconds):</label>
        <input type="text" id="time-interval" value="5 ">Mins

        <br>
        <br> recorderType:

        <select id="audio-recorderType" style="font-size:22px;vertical-align: middle;margin-right: 5px;">
            <option>[Best Available Recorder]</option>

            <option>WebAudio API (WAV)</option>

        </select>
        <br>

        <input id="left-channel" type="checkbox" checked style="width:auto;">
        <label for="left-channel">Record Mono Audio if WebAudio API is selected (above)</label>

        <br>
        <br>

        <button id="start-recording">Start</button>
        <button id="stop-recording" disabled>Stop</button>

        <button id="pause-recording" disabled>Pause</button>
        <button id="resume-recording" disabled>Resume</button>

        <button id="save-recording" disabled>Save</button>
    </section>

    <section class="experiment">
        <div id="audios-container"></div>
    </section>


    <script>
        function captureUserMedia(mediaConstraints, successCallback, errorCallback) {
            navigator.mediaDevices.getUserMedia(mediaConstraints).then(successCallback).catch(errorCallback);
        }

        var mediaConstraints = {
            audio: true
        };

        document.querySelector('#start-recording').onclick = function() {
            this.disabled = true;
            captureUserMedia(mediaConstraints, onMediaSuccess, onMediaError);
        };

        document.querySelector('#stop-recording').onclick = function() {
            this.disabled = true;
            mediaRecorder.stop();
            mediaRecorder.stream.stop();

            document.querySelector('#pause-recording').disabled = true;
            document.querySelector('#start-recording').disabled = false;
        };

        document.querySelector('#pause-recording').onclick = function() {
            this.disabled = true;
            mediaRecorder.pause();

            document.querySelector('#resume-recording').disabled = false;
        };

        document.querySelector('#resume-recording').onclick = function() {
            this.disabled = true;
            mediaRecorder.resume();

            document.querySelector('#pause-recording').disabled = false;
        };

        document.querySelector('#save-recording').onclick = function() {
            this.disabled = true;
            mediaRecorder.save();

            // alert('Drop WebM file on Chrome or Firefox. Both can play entire file. VLC player or other players may not work.');
        };

        var mediaRecorder;

        function onMediaSuccess(stream) {
            var audio = document.createElement('audio');

            audio = mergeProps(audio, {
                controls: true,
                muted: true
            });
            audio.srcObject = stream;
            audio.play();

            audiosContainer.appendChild(audio);
            audiosContainer.appendChild(document.createElement('hr'));

            mediaRecorder = new MediaStreamRecorder(stream);
            mediaRecorder.stream = stream;

            var recorderType = document.getElementById('audio-recorderType').value;

            if (recorderType === 'MediaRecorder API') {
                mediaRecorder.recorderType = MediaRecorderWrapper;
            }

            if (recorderType === 'WebAudio API (WAV)') {
                mediaRecorder.recorderType = StereoAudioRecorder;
                mediaRecorder.mimeType = 'audio/wav';
            }

            if (recorderType === 'WebAudio API (PCM)') {
                mediaRecorder.recorderType = StereoAudioRecorder;
                mediaRecorder.mimeType = 'audio/pcm';
            }

            // don't force any mimeType; use above "recorderType" instead.
            // mediaRecorder.mimeType = 'audio/webm'; // audio/ogg or audio/wav or audio/webm

            mediaRecorder.audioChannels = !!document.getElementById('left-channel').checked ? 1 : 2;
            mediaRecorder.ondataavailable = function(blob) {
               // var a = document.createElement('a');
                //a.target = '_blank';
                //a.innerHTML = 'Open Recorded Audio No. ' + (index++) + ' (Size: ' + bytesToSize(blob.size) + ') Time Length: ' + getTimeLength(timeInterval);

                //a.href = URL.createObjectURL(blob);

                //audiosContainer.appendChild(a);
                //audiosContainer.appendChild(document.createElement('hr'));
                var formData = new FormData();
                formData.append('audio', blob, "audio1.wav");
                $.ajax({
                    url: 'http://127.0.0.1:8181/api/uploadpubaudio/training/courses/web',
                    type: 'post',
                    data: formData,
                    processData: false,
                    contentType: false,
                    multiple: true,
                    success: function(data) {
                        alert();
                        var obj = JSON.parse(data);
                        console.log(JSON.stringify(obj));
                    },
                    failure: function(data) {
                        alert("file not uploaded");
                    }
                })

            };

            var timeInterval = 5 * 60 * 1000;

            // get blob after specific time interval
            mediaRecorder.start(timeInterval);

            document.querySelector('#stop-recording').disabled = false;
            document.querySelector('#pause-recording').disabled = false;
            document.querySelector('#save-recording').disabled = false;
        }

        function onMediaError(e) {
            console.error('media error', e);
        }

        var audiosContainer = document.getElementById('audios-container');
        var index = 1;

        // below function via: http://goo.gl/B3ae8c
        function bytesToSize(bytes) {
            var k = 1000;
            var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
            if (bytes === 0) return '0 Bytes';
            var i = parseInt(Math.floor(Math.log(bytes) / Math.log(k)), 10);
            return (bytes / Math.pow(k, i)).toPrecision(3) + ' ' + sizes[i];
        }

        // below function via: http://goo.gl/6QNDcI
        function getTimeLength(milliseconds) {
            var data = new Date(milliseconds);
            return data.getUTCHours() + " hours, " + data.getUTCMinutes() + " minutes and " + data.getUTCSeconds() + " second(s)";
        }

        window.onbeforeunload = function() {
            document.querySelector('#start-recording').disabled = false;
        };
    </script>


    <script src="assets/js/jquery.min.js"></script>
    <script src="contenttest/assets/js/bootstrap.js"></script>
    <script src="assets/learniteasy/vendor/msr/commits.js" async></script>
</article>

</body>

</html>












<!--



<!DOCTYPE HTML>
<html>

<head>
    <title>simplestyle_7</title>
    <meta name="description" content="website description"/>
    <meta name="keywords" content="website keywords, website keywords"/>
    <meta http-equiv="content-type"
          content="text/html; charset=windows-1252"/>
    <link rel="stylesheet" type="text/css"
          href="http://fonts.googleapis.com/css?family=Tangerine&amp;v1"/>
    <link rel="stylesheet" type="text/css"
          href="http://fonts.googleapis.com/css?family=Yanone+Kaffeesatz"/>
    <link rel="stylesheet" type="text/css" href="style/style.css"/>

    &lt;!&ndash; Theme color &ndash;&gt;
    <link id="switcher" href="contenttest/assets/css/materialize.min.css"
          rel="stylesheet">

    &lt;!&ndash; Theme color &ndash;&gt;
    <link id="switcher" href="contenttest/assets/css/ghpages-materialize.css"
          rel="stylesheet">

    <script type="stylesheet" src="assets/learniteasy/vendor/lineprogressbar/jquery.lineProgressbar.css"></script>

    <link href="http://fonts.googleapis.com/icon?family=Material+Icons"
          rel="stylesheet">
</head>


<body>
<div id="main">
    <div id="header">
        <div id="logo"></div>
        <div id="menubar">

        </div>
    </div>
    <div id="site_content">

        <div id="content">

            <section class="experiment" style="padding: 5px;">


                <br>
                <br> Recorder Type: Audio Recording

                <select id="video-recorderType" style="font-size:22px;vertical-align: middle;margin-right: 5px;">
                    <option value="[Best Available Recorder]">[Best Available Recorder]</option>
                    <option value="MediaRecorder API">MediaRecorder API</option>
                    <option value="WebP encoding into WebM">WebP encoding into WebM</option>
                </select>

                <br>
                <br>

                <button id="start-recording">Start</button>
                <button id="stop-recording" disabled>Stop</button>

                <button id="pause-recording" disabled>Pause</button>
                <button id="resume-recording" disabled>Resume</button>

                <button id="save-recording" disabled>Save</button>
                <button id="upload-recording" disabled>Upload</button>


            </section>

            <section class="experiment">
                <div id="videos-container">
                </div>
            </section>

        </div>
    </div>

</div>

<script
        src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js"></script>
&lt;!&ndash; Include all compiled plugins (below), or include individual files as needed &ndash;&gt;
&lt;!&ndash; Bootstrap &ndash;&gt;
<script src="contenttest/assets/js/bootstrap.js"></script>

<script type="text/javascript" src="assets/learniteasy/vendor/msr/MediaStreamRecorder.js"></script>
<script type="text/javascript" src="assets/learniteasy/vendor/msr/gumadapter.js"></script>

<script>
    function captureUserMedia(mediaConstraints, successCallback, errorCallback) {
        navigator.mediaDevices.getUserMedia(mediaConstraints).then(successCallback).catch(errorCallback);
    }

    var mediaConstraints = {
        audio: true
    };

    var mediaRecorder;

    document.querySelector('#start-recording').onclick = function () {
        this.disabled = true;
        captureUserMedia(mediaConstraints, onMediaSuccess, onMediaError);
        document.querySelector('#upload-recording').disabled = true;
    };

    document.querySelector('#stop-recording').onclick = function () {
        this.disabled = true;
        mediaRecorder.stop();
        mediaRecorder.stream.stop();

        document.querySelector('#pause-recording').disabled = true;
        document.querySelector('#start-recording').disabled = false;

    };

    document.querySelector('#pause-recording').onclick = function () {
        this.disabled = true;
        mediaRecorder.pause();

        document.querySelector('#resume-recording').disabled = false;
    };

    document.querySelector('#resume-recording').onclick = function () {
        this.disabled = true;
        mediaRecorder.resume();

        document.querySelector('#pause-recording').disabled = false;
    };

    document.querySelector('#save-recording').onclick = function () {
        document.querySelector('#upload-recording').disabled = false;
        this.disabled = true;
        var savefile = mediaRecorder.save();
        //alert(savefile);

        // alert('Drop WebM file on Chrome or Firefox. Both can play entire file. VLC player or other players may not work.');
    };

    document.querySelector('#upload-recording').onclick = function () {
       alert('Drop WebM file on Chrome or Firefox. Both can play entire file. VLC player or other players may not work.');
    };



    function onMediaSuccess(stream)
    {

        var mediaRecorder = new MediaStreamRecorder(stream);

        mediaRecorder.recorderType = StereoAudioRecorder;
        mediaRecorder.mimeType = 'audio/wav';

        mediaRecorder.ondataavailable = function (blob) {

            var formData = new FormData();
            formData.append('audio', blob, "recordedautio11.wav");

            $.ajax({

                url: 'http://127.0.0.1:8181/api/uploadpubaudio/training/courses/web',
                type: 'post',
                data: formData,
                processData: false,
                contentType: false,
                multiple: true,
                success: function(data) {
                    alert();
                    var obj = JSON.parse(data);
                    console.log(JSON.stringify(obj));
                },
                failure: function(data) {
                    alert("file not uploaded");
                }
            });


        };


        var timeInterval = 5 * 60 * 1000;

        // get blob after specific time interval
        mediaRecorder.start(timeInterval);

        document.querySelector('#stop-recording').disabled = false;
        document.querySelector('#pause-recording').disabled = false;
        document.querySelector('#save-recording').disabled = false;
    }

    function onMediaError(e) {
        console.error('media error', e);
    }

    //var videosContainer = document.getElementById('videos-container');
    var index = 1;

    // below function via: http://goo.gl/B3ae8c
    function bytesToSize(bytes) {
        var k = 1000;
        var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
        if (bytes === 0) return '0 Bytes';
        var i = parseInt(Math.floor(Math.log(bytes) / Math.log(k)), 10);
        return (bytes / Math.pow(k, i)).toPrecision(3) + ' ' + sizes[i];
    }

    // below function via: http://goo.gl/6QNDcI
    function getTimeLength(milliseconds) {
        var data = new Date(milliseconds);
        return data.getUTCHours() + " hours, " + data.getUTCMinutes() + " minutes and " + data.getUTCSeconds() + " second(s)";
    }

    window.onbeforeunload = function () {
        document.querySelector('#start-recording').disabled = false;
    };
</script>


<script type="text/javascript">

    $(document).ready(function () {
        console.log("ready!");
    });


</script>

<script src="assets/learniteasy/vendor/msr/commits.js" async></script>
</body>
</html>
-->
