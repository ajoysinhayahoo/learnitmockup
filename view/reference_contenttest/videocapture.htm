<!DOCTYPE HTML>
<html>

<head>
    <title>simplestyle_7</title>
    <meta name="description" content="website description"/>
    <meta name="keywords" content="website keywords, website keywords"/>
    <meta http-equiv="content-type"
          content="text/html; charset=windows-1252"/>
    <link rel="stylesheet" type="text/css"
          href="http://fonts.googleapis.com/css?family=Tangerine&amp;v1"/>
    <link rel="stylesheet" type="text/css"
          href="http://fonts.googleapis.com/css?family=Yanone+Kaffeesatz"/>
    <link rel="stylesheet" type="text/css" href="style/style.css"/>

    <!-- Theme color -->
    <link id="switcher" href="contenttest/assets/css/materialize.min.css"
          rel="stylesheet">

    <!-- Theme color -->
    <link id="switcher" href="contenttest/assets/css/ghpages-materialize.css"
          rel="stylesheet">

    <script type="stylesheet" src="assets/learniteasy/vendor/lineprogressbar/jquery.lineProgressbar.css"></script>

    <link href="http://fonts.googleapis.com/icon?family=Material+Icons"
          rel="stylesheet">
</head>


<body>
<div id="main">
    <div id="header">
        <div id="logo"></div>
        <div id="menubar">

        </div>
    </div>
    <div id="site_content">

        <div id="content">

            <section class="experiment" style="padding: 5px;">
                <label for="time-interval">Time Interval (milliseconds):</label>
                <input type="text" id="time-interval" value="15000">

                <br>
                <br> recorderType:

                <select id="video-recorderType" style="font-size:22px;vertical-align: middle;margin-right: 5px;">
                    <option value="[Best Available Recorder]">[Best Available Recorder]</option>
                    <option value="MediaRecorder API">MediaRecorder API</option>
                    <option value="WebP encoding into WebM">WebP encoding into WebM</option>
                </select>

                <br>
                <br>

                <button id="start-recording">Start</button>
                <button id="stop-recording" disabled>Stop</button>

                <button id="pause-recording" disabled>Pause</button>
                <button id="resume-recording" disabled>Resume</button>

                <button id="save-recording" disabled>Save</button>
                <button id="upload-recording" disabled>Upload</button>

                <br>
                <br>

                <label for="video-width">Video Width:</label>
                <input type="text" id="video-width" value="320">

                <label for="video-height">Video Height:</label>
                <input type="text" id="video-height" value="240">
            </section>

            <section class="experiment">
                <div id="videos-container">
                </div>
            </section>

        </div>
    </div>

</div>

<script
        src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js"></script>
<!-- Include all compiled plugins (below), or include individual files as needed -->
<!-- Bootstrap -->
<script src="contenttest/assets/js/bootstrap.js"></script>

<script type="text/javascript" src="assets/learniteasy/vendor/msr/MediaStreamRecorder.js"></script>
<script type="text/javascript" src="assets/learniteasy/vendor/msr/gumadapter.js"></script>

<script>
    function captureUserMedia(mediaConstraints, successCallback, errorCallback) {
        navigator.mediaDevices.getUserMedia(mediaConstraints).then(successCallback).catch(errorCallback);
    }

    var mediaConstraints = {
        audio: !IsOpera && !IsEdge, // record both audio/video in Firefox/Chrome
        video: true
    };

    document.querySelector('#start-recording').onclick = function () {
        this.disabled = true;
        captureUserMedia(mediaConstraints, onMediaSuccess, onMediaError);
        document.querySelector('#upload-recording').disabled = true;
    };

    document.querySelector('#stop-recording').onclick = function () {
        this.disabled = true;
        mediaRecorder.stop();
        mediaRecorder.stream.stop();

        document.querySelector('#pause-recording').disabled = true;
        document.querySelector('#start-recording').disabled = false;

    };

    document.querySelector('#pause-recording').onclick = function () {
        this.disabled = true;
        mediaRecorder.pause();

        document.querySelector('#resume-recording').disabled = false;
    };

    document.querySelector('#resume-recording').onclick = function () {
        this.disabled = true;
        mediaRecorder.resume();

        document.querySelector('#pause-recording').disabled = false;
    };

    document.querySelector('#save-recording').onclick = function () {
        document.querySelector('#upload-recording').disabled = false;
        this.disabled = true;
        var savefile = mediaRecorder.save();
        alert(savefile);

        // alert('Drop WebM file on Chrome or Firefox. Both can play entire file. VLC player or other players may not work.');
    };

    document.querySelector('#upload-recording').onclick = function () {
       alert('Drop WebM file on Chrome or Firefox. Both can play entire file. VLC player or other players may not work.');
    };

    var mediaRecorder;

    function onMediaSuccess(stream)
    {
        var video = document.createElement('video');

        var videoWidth = document.getElementById('video-width').value || 320;
        var videoHeight = document.getElementById('video-height').value || 240;

        video = mergeProps(video, {
            controls: true,
            muted: true,
            width: videoWidth,
            height: videoHeight,
            src: URL.createObjectURL(stream)
        });
        video.play();

        videosContainer.appendChild(video);
        videosContainer.appendChild(document.createElement('hr'));

        mediaRecorder = new MediaStreamRecorder(stream);
        mediaRecorder.stream = stream;

        var recorderType = document.getElementById('video-recorderType').value;

        //if (recorderType === 'MediaRecorder API') {
            mediaRecorder.recorderType = MediaRecorderWrapper;
        //}

        //if (recorderType === 'WebP encoding into WebM') {
            //mediaRecorder.recorderType = WhammyRecorder;
        //}

        //mediaRecorder.recorderType = MediaStreamRecorder;

        // don't force any mimeType; use above "recorderType" instead.
         mediaRecorder.mimeType = 'video/webm'; // video/webm or video/mp4
        //mediaRecorder.mimeType = 'video/mp4'; // video/webm or video/mp4
        //mediaRecorder.mimeType = 'audio/wav'; // video/webm or video/mp4


        mediaRecorder.videoWidth = videoWidth;
        mediaRecorder.videoHeight = videoHeight;
        mediaRecorder.ondataavailable = function (blob) {

            var formData = new FormData();
            formData.append('video', blob, "ABCDEF.webm");

          /*  var fileType = 'video'; // or "audio"
            var fileName = 'ABCDEF.webm';  // or "wav" or "ogg"

            var formData = new FormData();
            formData.append(fileType + '-filename', fileName);
            formData.append(fileType + '-blob', mediaConstraints);
*/
            $.ajax({
                /*xhr: function() {
                    var xhr = new window.XMLHttpRequest();

                    /!*xhr.upload.addEventListener("progress", function(evt) {

                        if (evt.lengthComputable) {
                            var percentComplete = evt.loaded / evt.total;
                            percentComplete = parseInt(percentComplete * 100);

                            if (percentComplete % 10 == 0) {
                                $('#progressbar1').LineProgressbar({
                                    percentage: percentComplete,
                                    ShowProgressCount: false,
                                    height: '20px',
                                    duration : "slow"
                                });
                            }

                            //alert("a");

                            //$('#progress').css('backgroundPosition', percentComplete + " 0" )

                            //alert("b");
                            console.log(percentComplete);

                            if (percentComplete === 100) {
                                alert("File has been uploaded")
                            }

                        }
                    }, false);*!/

                    xhr.onreadystatechange = function(e) {
                        if (xhr.readyState == 4) {
                            progress.className = (xhr.status == 200 ? "success" : "failure");
                        }
                    };

                    return xhr;
                },*/

                url: 'http://127.0.0.1:8181/api/uploadpubvideo/training/courses/web',
                //url: 'http://127.0.0.1:8181/s',
                type: 'post',
                data: formData,
                //data: {name: "TEST", size: "12345", type:"TXT"},
                processData: false,
                contentType: false,
                multiple: true,
                success: function(data) {
                    alert();
                    var obj = JSON.parse(data);
                    console.log(JSON.stringify(obj));
                    //console.log(JSON.stringify(obj.extras));
                    //var newSrc = "/findimage/"+obj.extras._id;
                    //$('img[id="imageid"]').attr('src', newSrc);

                    //imageid = obj.extras._id;

                },
                failure: function(data) {
                    alert("file not uploaded");
                }
            });

            /*var a = document.createElement('a');
            a.target = '_blank';
            a.innerHTML = 'Open Recorded Video No. ' + (index++) + ' (Size: ' + bytesToSize(blob.size) + ') Time Length: ' + getTimeLength(timeInterval);

            a.href = URL.createObjectURL(blob);

            videosContainer.appendChild(a);
            videosContainer.appendChild(document.createElement('hr'));*/
        };

       /* var timeInterval = document.querySelector('#time-interval').value;
        if (timeInterval) timeInterval = parseInt(timeInterval);
        else timeInterval = 15 * 1000;*/

        var timeInterval = 5 * 60 * 1000;

        // get blob after specific time interval
        mediaRecorder.start(timeInterval);

        document.querySelector('#stop-recording').disabled = false;
        document.querySelector('#pause-recording').disabled = false;
        document.querySelector('#save-recording').disabled = false;
    }

    function onMediaError(e) {
        console.error('media error', e);
    }

    var videosContainer = document.getElementById('videos-container');
    var index = 1;

    // below function via: http://goo.gl/B3ae8c
    function bytesToSize(bytes) {
        var k = 1000;
        var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
        if (bytes === 0) return '0 Bytes';
        var i = parseInt(Math.floor(Math.log(bytes) / Math.log(k)), 10);
        return (bytes / Math.pow(k, i)).toPrecision(3) + ' ' + sizes[i];
    }

    // below function via: http://goo.gl/6QNDcI
    function getTimeLength(milliseconds) {
        var data = new Date(milliseconds);
        return data.getUTCHours() + " hours, " + data.getUTCMinutes() + " minutes and " + data.getUTCSeconds() + " second(s)";
    }

    window.onbeforeunload = function () {
        document.querySelector('#start-recording').disabled = false;
    };
</script>


<script type="text/javascript">

    $(document).ready(function () {
        console.log("ready!");
    });


</script>

<script src="assets/learniteasy/vendor/msr/commits.js" async></script>
</body>
</html>
